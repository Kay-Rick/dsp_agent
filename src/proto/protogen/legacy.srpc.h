#pragma once
#include <stdio.h>
#include <string>
#include "srpc/rpc_define.h"
#include "legacy.pb.h"

namespace DSPController
{

/*
 * Server codes
 * Generated by SRPC
 */

class Service : public srpc::RPCService
{
public:
	// please implement these methods in server.cc

	virtual void LoadSarApp(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void StartSarApp(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void StopSarApp(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void SwitchSarApp(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void LoadElecReco(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void StartElecReco(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void StopElecReco(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void SwitchElecReco(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void LoadCommunication(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void StartCommunication(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void StopCommunication(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void SwitchCommunication(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void ConfigCommunication(ConfigRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void LoadNavigation(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void StartNavigation(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void StopNavigation(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void SwitchNavigation(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void ConfigNavigation(ConfigRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void LoadElectricJam(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void StartElectricJam(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void StopElectricJam(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void SwitchElectricJam(DSPControllerRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void ConfigElectricJam(ConfigRequest *request, DSPControllerResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void GetComReconstructTime(DSPControllerRequest *request, ReconstructTimeResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void GetSarReconstructTime(DSPControllerRequest *request, ReconstructTimeResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void GetElecReconstructTime(DSPControllerRequest *request, ReconstructTimeResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void GetNavReconstructTime(DSPControllerRequest *request, ReconstructTimeResponse *response,
					srpc::RPCContext *ctx) = 0;

	virtual void GetJamReconstructTime(DSPControllerRequest *request, ReconstructTimeResponse *response,
					srpc::RPCContext *ctx) = 0;

public:
	Service();
};

/*
 * Client codes
 * Generated by SRPC
 */

using LoadSarAppDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using StartSarAppDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using StopSarAppDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using SwitchSarAppDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using LoadElecRecoDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using StartElecRecoDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using StopElecRecoDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using SwitchElecRecoDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using LoadCommunicationDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using StartCommunicationDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using StopCommunicationDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using SwitchCommunicationDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using ConfigCommunicationDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using LoadNavigationDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using StartNavigationDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using StopNavigationDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using SwitchNavigationDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using ConfigNavigationDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using LoadElectricJamDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using StartElectricJamDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using StopElectricJamDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using SwitchElectricJamDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using ConfigElectricJamDone = std::function<void (DSPControllerResponse *, srpc::RPCContext *)>;
using GetComReconstructTimeDone = std::function<void (ReconstructTimeResponse *, srpc::RPCContext *)>;
using GetSarReconstructTimeDone = std::function<void (ReconstructTimeResponse *, srpc::RPCContext *)>;
using GetElecReconstructTimeDone = std::function<void (ReconstructTimeResponse *, srpc::RPCContext *)>;
using GetNavReconstructTimeDone = std::function<void (ReconstructTimeResponse *, srpc::RPCContext *)>;
using GetJamReconstructTimeDone = std::function<void (ReconstructTimeResponse *, srpc::RPCContext *)>;

class SRPCClient : public srpc::SRPCClient
{
public:
	void LoadSarApp(const DSPControllerRequest *req, LoadSarAppDone done);
	void LoadSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadSarApp(const DSPControllerRequest *req);

	void StartSarApp(const DSPControllerRequest *req, StartSarAppDone done);
	void StartSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartSarApp(const DSPControllerRequest *req);

	void StopSarApp(const DSPControllerRequest *req, StopSarAppDone done);
	void StopSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopSarApp(const DSPControllerRequest *req);

	void SwitchSarApp(const DSPControllerRequest *req, SwitchSarAppDone done);
	void SwitchSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchSarApp(const DSPControllerRequest *req);

	void LoadElecReco(const DSPControllerRequest *req, LoadElecRecoDone done);
	void LoadElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadElecReco(const DSPControllerRequest *req);

	void StartElecReco(const DSPControllerRequest *req, StartElecRecoDone done);
	void StartElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartElecReco(const DSPControllerRequest *req);

	void StopElecReco(const DSPControllerRequest *req, StopElecRecoDone done);
	void StopElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopElecReco(const DSPControllerRequest *req);

	void SwitchElecReco(const DSPControllerRequest *req, SwitchElecRecoDone done);
	void SwitchElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchElecReco(const DSPControllerRequest *req);

	void LoadCommunication(const DSPControllerRequest *req, LoadCommunicationDone done);
	void LoadCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadCommunication(const DSPControllerRequest *req);

	void StartCommunication(const DSPControllerRequest *req, StartCommunicationDone done);
	void StartCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartCommunication(const DSPControllerRequest *req);

	void StopCommunication(const DSPControllerRequest *req, StopCommunicationDone done);
	void StopCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopCommunication(const DSPControllerRequest *req);

	void SwitchCommunication(const DSPControllerRequest *req, SwitchCommunicationDone done);
	void SwitchCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchCommunication(const DSPControllerRequest *req);

	void ConfigCommunication(const ConfigRequest *req, ConfigCommunicationDone done);
	void ConfigCommunication(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigCommunication(const ConfigRequest *req);

	void LoadNavigation(const DSPControllerRequest *req, LoadNavigationDone done);
	void LoadNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadNavigation(const DSPControllerRequest *req);

	void StartNavigation(const DSPControllerRequest *req, StartNavigationDone done);
	void StartNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartNavigation(const DSPControllerRequest *req);

	void StopNavigation(const DSPControllerRequest *req, StopNavigationDone done);
	void StopNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopNavigation(const DSPControllerRequest *req);

	void SwitchNavigation(const DSPControllerRequest *req, SwitchNavigationDone done);
	void SwitchNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchNavigation(const DSPControllerRequest *req);

	void ConfigNavigation(const ConfigRequest *req, ConfigNavigationDone done);
	void ConfigNavigation(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigNavigation(const ConfigRequest *req);

	void LoadElectricJam(const DSPControllerRequest *req, LoadElectricJamDone done);
	void LoadElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadElectricJam(const DSPControllerRequest *req);

	void StartElectricJam(const DSPControllerRequest *req, StartElectricJamDone done);
	void StartElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartElectricJam(const DSPControllerRequest *req);

	void StopElectricJam(const DSPControllerRequest *req, StopElectricJamDone done);
	void StopElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopElectricJam(const DSPControllerRequest *req);

	void SwitchElectricJam(const DSPControllerRequest *req, SwitchElectricJamDone done);
	void SwitchElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchElectricJam(const DSPControllerRequest *req);

	void ConfigElectricJam(const ConfigRequest *req, ConfigElectricJamDone done);
	void ConfigElectricJam(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigElectricJam(const ConfigRequest *req);

	void GetComReconstructTime(const DSPControllerRequest *req, GetComReconstructTimeDone done);
	void GetComReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetComReconstructTime(const DSPControllerRequest *req);

	void GetSarReconstructTime(const DSPControllerRequest *req, GetSarReconstructTimeDone done);
	void GetSarReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetSarReconstructTime(const DSPControllerRequest *req);

	void GetElecReconstructTime(const DSPControllerRequest *req, GetElecReconstructTimeDone done);
	void GetElecReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetElecReconstructTime(const DSPControllerRequest *req);

	void GetNavReconstructTime(const DSPControllerRequest *req, GetNavReconstructTimeDone done);
	void GetNavReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetNavReconstructTime(const DSPControllerRequest *req);

	void GetJamReconstructTime(const DSPControllerRequest *req, GetJamReconstructTimeDone done);
	void GetJamReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetJamReconstructTime(const DSPControllerRequest *req);

public:
	SRPCClient(const char *host, unsigned short port);
	SRPCClient(const struct srpc::RPCClientParams *params);

public:
	srpc::SRPCClientTask *create_LoadSarApp_task(LoadSarAppDone done);
	srpc::SRPCClientTask *create_StartSarApp_task(StartSarAppDone done);
	srpc::SRPCClientTask *create_StopSarApp_task(StopSarAppDone done);
	srpc::SRPCClientTask *create_SwitchSarApp_task(SwitchSarAppDone done);
	srpc::SRPCClientTask *create_LoadElecReco_task(LoadElecRecoDone done);
	srpc::SRPCClientTask *create_StartElecReco_task(StartElecRecoDone done);
	srpc::SRPCClientTask *create_StopElecReco_task(StopElecRecoDone done);
	srpc::SRPCClientTask *create_SwitchElecReco_task(SwitchElecRecoDone done);
	srpc::SRPCClientTask *create_LoadCommunication_task(LoadCommunicationDone done);
	srpc::SRPCClientTask *create_StartCommunication_task(StartCommunicationDone done);
	srpc::SRPCClientTask *create_StopCommunication_task(StopCommunicationDone done);
	srpc::SRPCClientTask *create_SwitchCommunication_task(SwitchCommunicationDone done);
	srpc::SRPCClientTask *create_ConfigCommunication_task(ConfigCommunicationDone done);
	srpc::SRPCClientTask *create_LoadNavigation_task(LoadNavigationDone done);
	srpc::SRPCClientTask *create_StartNavigation_task(StartNavigationDone done);
	srpc::SRPCClientTask *create_StopNavigation_task(StopNavigationDone done);
	srpc::SRPCClientTask *create_SwitchNavigation_task(SwitchNavigationDone done);
	srpc::SRPCClientTask *create_ConfigNavigation_task(ConfigNavigationDone done);
	srpc::SRPCClientTask *create_LoadElectricJam_task(LoadElectricJamDone done);
	srpc::SRPCClientTask *create_StartElectricJam_task(StartElectricJamDone done);
	srpc::SRPCClientTask *create_StopElectricJam_task(StopElectricJamDone done);
	srpc::SRPCClientTask *create_SwitchElectricJam_task(SwitchElectricJamDone done);
	srpc::SRPCClientTask *create_ConfigElectricJam_task(ConfigElectricJamDone done);
	srpc::SRPCClientTask *create_GetComReconstructTime_task(GetComReconstructTimeDone done);
	srpc::SRPCClientTask *create_GetSarReconstructTime_task(GetSarReconstructTimeDone done);
	srpc::SRPCClientTask *create_GetElecReconstructTime_task(GetElecReconstructTimeDone done);
	srpc::SRPCClientTask *create_GetNavReconstructTime_task(GetNavReconstructTimeDone done);
	srpc::SRPCClientTask *create_GetJamReconstructTime_task(GetJamReconstructTimeDone done);
};

class SRPCHttpClient : public srpc::SRPCHttpClient
{
public:
	void LoadSarApp(const DSPControllerRequest *req, LoadSarAppDone done);
	void LoadSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadSarApp(const DSPControllerRequest *req);

	void StartSarApp(const DSPControllerRequest *req, StartSarAppDone done);
	void StartSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartSarApp(const DSPControllerRequest *req);

	void StopSarApp(const DSPControllerRequest *req, StopSarAppDone done);
	void StopSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopSarApp(const DSPControllerRequest *req);

	void SwitchSarApp(const DSPControllerRequest *req, SwitchSarAppDone done);
	void SwitchSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchSarApp(const DSPControllerRequest *req);

	void LoadElecReco(const DSPControllerRequest *req, LoadElecRecoDone done);
	void LoadElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadElecReco(const DSPControllerRequest *req);

	void StartElecReco(const DSPControllerRequest *req, StartElecRecoDone done);
	void StartElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartElecReco(const DSPControllerRequest *req);

	void StopElecReco(const DSPControllerRequest *req, StopElecRecoDone done);
	void StopElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopElecReco(const DSPControllerRequest *req);

	void SwitchElecReco(const DSPControllerRequest *req, SwitchElecRecoDone done);
	void SwitchElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchElecReco(const DSPControllerRequest *req);

	void LoadCommunication(const DSPControllerRequest *req, LoadCommunicationDone done);
	void LoadCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadCommunication(const DSPControllerRequest *req);

	void StartCommunication(const DSPControllerRequest *req, StartCommunicationDone done);
	void StartCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartCommunication(const DSPControllerRequest *req);

	void StopCommunication(const DSPControllerRequest *req, StopCommunicationDone done);
	void StopCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopCommunication(const DSPControllerRequest *req);

	void SwitchCommunication(const DSPControllerRequest *req, SwitchCommunicationDone done);
	void SwitchCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchCommunication(const DSPControllerRequest *req);

	void ConfigCommunication(const ConfigRequest *req, ConfigCommunicationDone done);
	void ConfigCommunication(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigCommunication(const ConfigRequest *req);

	void LoadNavigation(const DSPControllerRequest *req, LoadNavigationDone done);
	void LoadNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadNavigation(const DSPControllerRequest *req);

	void StartNavigation(const DSPControllerRequest *req, StartNavigationDone done);
	void StartNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartNavigation(const DSPControllerRequest *req);

	void StopNavigation(const DSPControllerRequest *req, StopNavigationDone done);
	void StopNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopNavigation(const DSPControllerRequest *req);

	void SwitchNavigation(const DSPControllerRequest *req, SwitchNavigationDone done);
	void SwitchNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchNavigation(const DSPControllerRequest *req);

	void ConfigNavigation(const ConfigRequest *req, ConfigNavigationDone done);
	void ConfigNavigation(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigNavigation(const ConfigRequest *req);

	void LoadElectricJam(const DSPControllerRequest *req, LoadElectricJamDone done);
	void LoadElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadElectricJam(const DSPControllerRequest *req);

	void StartElectricJam(const DSPControllerRequest *req, StartElectricJamDone done);
	void StartElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartElectricJam(const DSPControllerRequest *req);

	void StopElectricJam(const DSPControllerRequest *req, StopElectricJamDone done);
	void StopElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopElectricJam(const DSPControllerRequest *req);

	void SwitchElectricJam(const DSPControllerRequest *req, SwitchElectricJamDone done);
	void SwitchElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchElectricJam(const DSPControllerRequest *req);

	void ConfigElectricJam(const ConfigRequest *req, ConfigElectricJamDone done);
	void ConfigElectricJam(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigElectricJam(const ConfigRequest *req);

	void GetComReconstructTime(const DSPControllerRequest *req, GetComReconstructTimeDone done);
	void GetComReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetComReconstructTime(const DSPControllerRequest *req);

	void GetSarReconstructTime(const DSPControllerRequest *req, GetSarReconstructTimeDone done);
	void GetSarReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetSarReconstructTime(const DSPControllerRequest *req);

	void GetElecReconstructTime(const DSPControllerRequest *req, GetElecReconstructTimeDone done);
	void GetElecReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetElecReconstructTime(const DSPControllerRequest *req);

	void GetNavReconstructTime(const DSPControllerRequest *req, GetNavReconstructTimeDone done);
	void GetNavReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetNavReconstructTime(const DSPControllerRequest *req);

	void GetJamReconstructTime(const DSPControllerRequest *req, GetJamReconstructTimeDone done);
	void GetJamReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetJamReconstructTime(const DSPControllerRequest *req);

public:
	SRPCHttpClient(const char *host, unsigned short port);
	SRPCHttpClient(const struct srpc::RPCClientParams *params);

public:
	srpc::SRPCHttpClientTask *create_LoadSarApp_task(LoadSarAppDone done);
	srpc::SRPCHttpClientTask *create_StartSarApp_task(StartSarAppDone done);
	srpc::SRPCHttpClientTask *create_StopSarApp_task(StopSarAppDone done);
	srpc::SRPCHttpClientTask *create_SwitchSarApp_task(SwitchSarAppDone done);
	srpc::SRPCHttpClientTask *create_LoadElecReco_task(LoadElecRecoDone done);
	srpc::SRPCHttpClientTask *create_StartElecReco_task(StartElecRecoDone done);
	srpc::SRPCHttpClientTask *create_StopElecReco_task(StopElecRecoDone done);
	srpc::SRPCHttpClientTask *create_SwitchElecReco_task(SwitchElecRecoDone done);
	srpc::SRPCHttpClientTask *create_LoadCommunication_task(LoadCommunicationDone done);
	srpc::SRPCHttpClientTask *create_StartCommunication_task(StartCommunicationDone done);
	srpc::SRPCHttpClientTask *create_StopCommunication_task(StopCommunicationDone done);
	srpc::SRPCHttpClientTask *create_SwitchCommunication_task(SwitchCommunicationDone done);
	srpc::SRPCHttpClientTask *create_ConfigCommunication_task(ConfigCommunicationDone done);
	srpc::SRPCHttpClientTask *create_LoadNavigation_task(LoadNavigationDone done);
	srpc::SRPCHttpClientTask *create_StartNavigation_task(StartNavigationDone done);
	srpc::SRPCHttpClientTask *create_StopNavigation_task(StopNavigationDone done);
	srpc::SRPCHttpClientTask *create_SwitchNavigation_task(SwitchNavigationDone done);
	srpc::SRPCHttpClientTask *create_ConfigNavigation_task(ConfigNavigationDone done);
	srpc::SRPCHttpClientTask *create_LoadElectricJam_task(LoadElectricJamDone done);
	srpc::SRPCHttpClientTask *create_StartElectricJam_task(StartElectricJamDone done);
	srpc::SRPCHttpClientTask *create_StopElectricJam_task(StopElectricJamDone done);
	srpc::SRPCHttpClientTask *create_SwitchElectricJam_task(SwitchElectricJamDone done);
	srpc::SRPCHttpClientTask *create_ConfigElectricJam_task(ConfigElectricJamDone done);
	srpc::SRPCHttpClientTask *create_GetComReconstructTime_task(GetComReconstructTimeDone done);
	srpc::SRPCHttpClientTask *create_GetSarReconstructTime_task(GetSarReconstructTimeDone done);
	srpc::SRPCHttpClientTask *create_GetElecReconstructTime_task(GetElecReconstructTimeDone done);
	srpc::SRPCHttpClientTask *create_GetNavReconstructTime_task(GetNavReconstructTimeDone done);
	srpc::SRPCHttpClientTask *create_GetJamReconstructTime_task(GetJamReconstructTimeDone done);
};

class BRPCClient : public srpc::BRPCClient
{
public:
	void LoadSarApp(const DSPControllerRequest *req, LoadSarAppDone done);
	void LoadSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadSarApp(const DSPControllerRequest *req);

	void StartSarApp(const DSPControllerRequest *req, StartSarAppDone done);
	void StartSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartSarApp(const DSPControllerRequest *req);

	void StopSarApp(const DSPControllerRequest *req, StopSarAppDone done);
	void StopSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopSarApp(const DSPControllerRequest *req);

	void SwitchSarApp(const DSPControllerRequest *req, SwitchSarAppDone done);
	void SwitchSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchSarApp(const DSPControllerRequest *req);

	void LoadElecReco(const DSPControllerRequest *req, LoadElecRecoDone done);
	void LoadElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadElecReco(const DSPControllerRequest *req);

	void StartElecReco(const DSPControllerRequest *req, StartElecRecoDone done);
	void StartElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartElecReco(const DSPControllerRequest *req);

	void StopElecReco(const DSPControllerRequest *req, StopElecRecoDone done);
	void StopElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopElecReco(const DSPControllerRequest *req);

	void SwitchElecReco(const DSPControllerRequest *req, SwitchElecRecoDone done);
	void SwitchElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchElecReco(const DSPControllerRequest *req);

	void LoadCommunication(const DSPControllerRequest *req, LoadCommunicationDone done);
	void LoadCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadCommunication(const DSPControllerRequest *req);

	void StartCommunication(const DSPControllerRequest *req, StartCommunicationDone done);
	void StartCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartCommunication(const DSPControllerRequest *req);

	void StopCommunication(const DSPControllerRequest *req, StopCommunicationDone done);
	void StopCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopCommunication(const DSPControllerRequest *req);

	void SwitchCommunication(const DSPControllerRequest *req, SwitchCommunicationDone done);
	void SwitchCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchCommunication(const DSPControllerRequest *req);

	void ConfigCommunication(const ConfigRequest *req, ConfigCommunicationDone done);
	void ConfigCommunication(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigCommunication(const ConfigRequest *req);

	void LoadNavigation(const DSPControllerRequest *req, LoadNavigationDone done);
	void LoadNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadNavigation(const DSPControllerRequest *req);

	void StartNavigation(const DSPControllerRequest *req, StartNavigationDone done);
	void StartNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartNavigation(const DSPControllerRequest *req);

	void StopNavigation(const DSPControllerRequest *req, StopNavigationDone done);
	void StopNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopNavigation(const DSPControllerRequest *req);

	void SwitchNavigation(const DSPControllerRequest *req, SwitchNavigationDone done);
	void SwitchNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchNavigation(const DSPControllerRequest *req);

	void ConfigNavigation(const ConfigRequest *req, ConfigNavigationDone done);
	void ConfigNavigation(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigNavigation(const ConfigRequest *req);

	void LoadElectricJam(const DSPControllerRequest *req, LoadElectricJamDone done);
	void LoadElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadElectricJam(const DSPControllerRequest *req);

	void StartElectricJam(const DSPControllerRequest *req, StartElectricJamDone done);
	void StartElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartElectricJam(const DSPControllerRequest *req);

	void StopElectricJam(const DSPControllerRequest *req, StopElectricJamDone done);
	void StopElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopElectricJam(const DSPControllerRequest *req);

	void SwitchElectricJam(const DSPControllerRequest *req, SwitchElectricJamDone done);
	void SwitchElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchElectricJam(const DSPControllerRequest *req);

	void ConfigElectricJam(const ConfigRequest *req, ConfigElectricJamDone done);
	void ConfigElectricJam(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigElectricJam(const ConfigRequest *req);

	void GetComReconstructTime(const DSPControllerRequest *req, GetComReconstructTimeDone done);
	void GetComReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetComReconstructTime(const DSPControllerRequest *req);

	void GetSarReconstructTime(const DSPControllerRequest *req, GetSarReconstructTimeDone done);
	void GetSarReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetSarReconstructTime(const DSPControllerRequest *req);

	void GetElecReconstructTime(const DSPControllerRequest *req, GetElecReconstructTimeDone done);
	void GetElecReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetElecReconstructTime(const DSPControllerRequest *req);

	void GetNavReconstructTime(const DSPControllerRequest *req, GetNavReconstructTimeDone done);
	void GetNavReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetNavReconstructTime(const DSPControllerRequest *req);

	void GetJamReconstructTime(const DSPControllerRequest *req, GetJamReconstructTimeDone done);
	void GetJamReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetJamReconstructTime(const DSPControllerRequest *req);

public:
	BRPCClient(const char *host, unsigned short port);
	BRPCClient(const struct srpc::RPCClientParams *params);

public:
	srpc::BRPCClientTask *create_LoadSarApp_task(LoadSarAppDone done);
	srpc::BRPCClientTask *create_StartSarApp_task(StartSarAppDone done);
	srpc::BRPCClientTask *create_StopSarApp_task(StopSarAppDone done);
	srpc::BRPCClientTask *create_SwitchSarApp_task(SwitchSarAppDone done);
	srpc::BRPCClientTask *create_LoadElecReco_task(LoadElecRecoDone done);
	srpc::BRPCClientTask *create_StartElecReco_task(StartElecRecoDone done);
	srpc::BRPCClientTask *create_StopElecReco_task(StopElecRecoDone done);
	srpc::BRPCClientTask *create_SwitchElecReco_task(SwitchElecRecoDone done);
	srpc::BRPCClientTask *create_LoadCommunication_task(LoadCommunicationDone done);
	srpc::BRPCClientTask *create_StartCommunication_task(StartCommunicationDone done);
	srpc::BRPCClientTask *create_StopCommunication_task(StopCommunicationDone done);
	srpc::BRPCClientTask *create_SwitchCommunication_task(SwitchCommunicationDone done);
	srpc::BRPCClientTask *create_ConfigCommunication_task(ConfigCommunicationDone done);
	srpc::BRPCClientTask *create_LoadNavigation_task(LoadNavigationDone done);
	srpc::BRPCClientTask *create_StartNavigation_task(StartNavigationDone done);
	srpc::BRPCClientTask *create_StopNavigation_task(StopNavigationDone done);
	srpc::BRPCClientTask *create_SwitchNavigation_task(SwitchNavigationDone done);
	srpc::BRPCClientTask *create_ConfigNavigation_task(ConfigNavigationDone done);
	srpc::BRPCClientTask *create_LoadElectricJam_task(LoadElectricJamDone done);
	srpc::BRPCClientTask *create_StartElectricJam_task(StartElectricJamDone done);
	srpc::BRPCClientTask *create_StopElectricJam_task(StopElectricJamDone done);
	srpc::BRPCClientTask *create_SwitchElectricJam_task(SwitchElectricJamDone done);
	srpc::BRPCClientTask *create_ConfigElectricJam_task(ConfigElectricJamDone done);
	srpc::BRPCClientTask *create_GetComReconstructTime_task(GetComReconstructTimeDone done);
	srpc::BRPCClientTask *create_GetSarReconstructTime_task(GetSarReconstructTimeDone done);
	srpc::BRPCClientTask *create_GetElecReconstructTime_task(GetElecReconstructTimeDone done);
	srpc::BRPCClientTask *create_GetNavReconstructTime_task(GetNavReconstructTimeDone done);
	srpc::BRPCClientTask *create_GetJamReconstructTime_task(GetJamReconstructTimeDone done);
};

class TRPCClient : public srpc::TRPCClient
{
public:
	void LoadSarApp(const DSPControllerRequest *req, LoadSarAppDone done);
	void LoadSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadSarApp(const DSPControllerRequest *req);

	void StartSarApp(const DSPControllerRequest *req, StartSarAppDone done);
	void StartSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartSarApp(const DSPControllerRequest *req);

	void StopSarApp(const DSPControllerRequest *req, StopSarAppDone done);
	void StopSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopSarApp(const DSPControllerRequest *req);

	void SwitchSarApp(const DSPControllerRequest *req, SwitchSarAppDone done);
	void SwitchSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchSarApp(const DSPControllerRequest *req);

	void LoadElecReco(const DSPControllerRequest *req, LoadElecRecoDone done);
	void LoadElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadElecReco(const DSPControllerRequest *req);

	void StartElecReco(const DSPControllerRequest *req, StartElecRecoDone done);
	void StartElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartElecReco(const DSPControllerRequest *req);

	void StopElecReco(const DSPControllerRequest *req, StopElecRecoDone done);
	void StopElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopElecReco(const DSPControllerRequest *req);

	void SwitchElecReco(const DSPControllerRequest *req, SwitchElecRecoDone done);
	void SwitchElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchElecReco(const DSPControllerRequest *req);

	void LoadCommunication(const DSPControllerRequest *req, LoadCommunicationDone done);
	void LoadCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadCommunication(const DSPControllerRequest *req);

	void StartCommunication(const DSPControllerRequest *req, StartCommunicationDone done);
	void StartCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartCommunication(const DSPControllerRequest *req);

	void StopCommunication(const DSPControllerRequest *req, StopCommunicationDone done);
	void StopCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopCommunication(const DSPControllerRequest *req);

	void SwitchCommunication(const DSPControllerRequest *req, SwitchCommunicationDone done);
	void SwitchCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchCommunication(const DSPControllerRequest *req);

	void ConfigCommunication(const ConfigRequest *req, ConfigCommunicationDone done);
	void ConfigCommunication(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigCommunication(const ConfigRequest *req);

	void LoadNavigation(const DSPControllerRequest *req, LoadNavigationDone done);
	void LoadNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadNavigation(const DSPControllerRequest *req);

	void StartNavigation(const DSPControllerRequest *req, StartNavigationDone done);
	void StartNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartNavigation(const DSPControllerRequest *req);

	void StopNavigation(const DSPControllerRequest *req, StopNavigationDone done);
	void StopNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopNavigation(const DSPControllerRequest *req);

	void SwitchNavigation(const DSPControllerRequest *req, SwitchNavigationDone done);
	void SwitchNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchNavigation(const DSPControllerRequest *req);

	void ConfigNavigation(const ConfigRequest *req, ConfigNavigationDone done);
	void ConfigNavigation(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigNavigation(const ConfigRequest *req);

	void LoadElectricJam(const DSPControllerRequest *req, LoadElectricJamDone done);
	void LoadElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadElectricJam(const DSPControllerRequest *req);

	void StartElectricJam(const DSPControllerRequest *req, StartElectricJamDone done);
	void StartElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartElectricJam(const DSPControllerRequest *req);

	void StopElectricJam(const DSPControllerRequest *req, StopElectricJamDone done);
	void StopElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopElectricJam(const DSPControllerRequest *req);

	void SwitchElectricJam(const DSPControllerRequest *req, SwitchElectricJamDone done);
	void SwitchElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchElectricJam(const DSPControllerRequest *req);

	void ConfigElectricJam(const ConfigRequest *req, ConfigElectricJamDone done);
	void ConfigElectricJam(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigElectricJam(const ConfigRequest *req);

	void GetComReconstructTime(const DSPControllerRequest *req, GetComReconstructTimeDone done);
	void GetComReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetComReconstructTime(const DSPControllerRequest *req);

	void GetSarReconstructTime(const DSPControllerRequest *req, GetSarReconstructTimeDone done);
	void GetSarReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetSarReconstructTime(const DSPControllerRequest *req);

	void GetElecReconstructTime(const DSPControllerRequest *req, GetElecReconstructTimeDone done);
	void GetElecReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetElecReconstructTime(const DSPControllerRequest *req);

	void GetNavReconstructTime(const DSPControllerRequest *req, GetNavReconstructTimeDone done);
	void GetNavReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetNavReconstructTime(const DSPControllerRequest *req);

	void GetJamReconstructTime(const DSPControllerRequest *req, GetJamReconstructTimeDone done);
	void GetJamReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetJamReconstructTime(const DSPControllerRequest *req);

public:
	TRPCClient(const char *host, unsigned short port);
	TRPCClient(const struct srpc::RPCClientParams *params);

public:
	srpc::TRPCClientTask *create_LoadSarApp_task(LoadSarAppDone done);
	srpc::TRPCClientTask *create_StartSarApp_task(StartSarAppDone done);
	srpc::TRPCClientTask *create_StopSarApp_task(StopSarAppDone done);
	srpc::TRPCClientTask *create_SwitchSarApp_task(SwitchSarAppDone done);
	srpc::TRPCClientTask *create_LoadElecReco_task(LoadElecRecoDone done);
	srpc::TRPCClientTask *create_StartElecReco_task(StartElecRecoDone done);
	srpc::TRPCClientTask *create_StopElecReco_task(StopElecRecoDone done);
	srpc::TRPCClientTask *create_SwitchElecReco_task(SwitchElecRecoDone done);
	srpc::TRPCClientTask *create_LoadCommunication_task(LoadCommunicationDone done);
	srpc::TRPCClientTask *create_StartCommunication_task(StartCommunicationDone done);
	srpc::TRPCClientTask *create_StopCommunication_task(StopCommunicationDone done);
	srpc::TRPCClientTask *create_SwitchCommunication_task(SwitchCommunicationDone done);
	srpc::TRPCClientTask *create_ConfigCommunication_task(ConfigCommunicationDone done);
	srpc::TRPCClientTask *create_LoadNavigation_task(LoadNavigationDone done);
	srpc::TRPCClientTask *create_StartNavigation_task(StartNavigationDone done);
	srpc::TRPCClientTask *create_StopNavigation_task(StopNavigationDone done);
	srpc::TRPCClientTask *create_SwitchNavigation_task(SwitchNavigationDone done);
	srpc::TRPCClientTask *create_ConfigNavigation_task(ConfigNavigationDone done);
	srpc::TRPCClientTask *create_LoadElectricJam_task(LoadElectricJamDone done);
	srpc::TRPCClientTask *create_StartElectricJam_task(StartElectricJamDone done);
	srpc::TRPCClientTask *create_StopElectricJam_task(StopElectricJamDone done);
	srpc::TRPCClientTask *create_SwitchElectricJam_task(SwitchElectricJamDone done);
	srpc::TRPCClientTask *create_ConfigElectricJam_task(ConfigElectricJamDone done);
	srpc::TRPCClientTask *create_GetComReconstructTime_task(GetComReconstructTimeDone done);
	srpc::TRPCClientTask *create_GetSarReconstructTime_task(GetSarReconstructTimeDone done);
	srpc::TRPCClientTask *create_GetElecReconstructTime_task(GetElecReconstructTimeDone done);
	srpc::TRPCClientTask *create_GetNavReconstructTime_task(GetNavReconstructTimeDone done);
	srpc::TRPCClientTask *create_GetJamReconstructTime_task(GetJamReconstructTimeDone done);
};

class TRPCHttpClient : public srpc::TRPCHttpClient
{
public:
	void LoadSarApp(const DSPControllerRequest *req, LoadSarAppDone done);
	void LoadSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadSarApp(const DSPControllerRequest *req);

	void StartSarApp(const DSPControllerRequest *req, StartSarAppDone done);
	void StartSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartSarApp(const DSPControllerRequest *req);

	void StopSarApp(const DSPControllerRequest *req, StopSarAppDone done);
	void StopSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopSarApp(const DSPControllerRequest *req);

	void SwitchSarApp(const DSPControllerRequest *req, SwitchSarAppDone done);
	void SwitchSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchSarApp(const DSPControllerRequest *req);

	void LoadElecReco(const DSPControllerRequest *req, LoadElecRecoDone done);
	void LoadElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadElecReco(const DSPControllerRequest *req);

	void StartElecReco(const DSPControllerRequest *req, StartElecRecoDone done);
	void StartElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartElecReco(const DSPControllerRequest *req);

	void StopElecReco(const DSPControllerRequest *req, StopElecRecoDone done);
	void StopElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopElecReco(const DSPControllerRequest *req);

	void SwitchElecReco(const DSPControllerRequest *req, SwitchElecRecoDone done);
	void SwitchElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchElecReco(const DSPControllerRequest *req);

	void LoadCommunication(const DSPControllerRequest *req, LoadCommunicationDone done);
	void LoadCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadCommunication(const DSPControllerRequest *req);

	void StartCommunication(const DSPControllerRequest *req, StartCommunicationDone done);
	void StartCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartCommunication(const DSPControllerRequest *req);

	void StopCommunication(const DSPControllerRequest *req, StopCommunicationDone done);
	void StopCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopCommunication(const DSPControllerRequest *req);

	void SwitchCommunication(const DSPControllerRequest *req, SwitchCommunicationDone done);
	void SwitchCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchCommunication(const DSPControllerRequest *req);

	void ConfigCommunication(const ConfigRequest *req, ConfigCommunicationDone done);
	void ConfigCommunication(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigCommunication(const ConfigRequest *req);

	void LoadNavigation(const DSPControllerRequest *req, LoadNavigationDone done);
	void LoadNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadNavigation(const DSPControllerRequest *req);

	void StartNavigation(const DSPControllerRequest *req, StartNavigationDone done);
	void StartNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartNavigation(const DSPControllerRequest *req);

	void StopNavigation(const DSPControllerRequest *req, StopNavigationDone done);
	void StopNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopNavigation(const DSPControllerRequest *req);

	void SwitchNavigation(const DSPControllerRequest *req, SwitchNavigationDone done);
	void SwitchNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchNavigation(const DSPControllerRequest *req);

	void ConfigNavigation(const ConfigRequest *req, ConfigNavigationDone done);
	void ConfigNavigation(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigNavigation(const ConfigRequest *req);

	void LoadElectricJam(const DSPControllerRequest *req, LoadElectricJamDone done);
	void LoadElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_LoadElectricJam(const DSPControllerRequest *req);

	void StartElectricJam(const DSPControllerRequest *req, StartElectricJamDone done);
	void StartElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StartElectricJam(const DSPControllerRequest *req);

	void StopElectricJam(const DSPControllerRequest *req, StopElectricJamDone done);
	void StopElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_StopElectricJam(const DSPControllerRequest *req);

	void SwitchElectricJam(const DSPControllerRequest *req, SwitchElectricJamDone done);
	void SwitchElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_SwitchElectricJam(const DSPControllerRequest *req);

	void ConfigElectricJam(const ConfigRequest *req, ConfigElectricJamDone done);
	void ConfigElectricJam(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> async_ConfigElectricJam(const ConfigRequest *req);

	void GetComReconstructTime(const DSPControllerRequest *req, GetComReconstructTimeDone done);
	void GetComReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetComReconstructTime(const DSPControllerRequest *req);

	void GetSarReconstructTime(const DSPControllerRequest *req, GetSarReconstructTimeDone done);
	void GetSarReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetSarReconstructTime(const DSPControllerRequest *req);

	void GetElecReconstructTime(const DSPControllerRequest *req, GetElecReconstructTimeDone done);
	void GetElecReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetElecReconstructTime(const DSPControllerRequest *req);

	void GetNavReconstructTime(const DSPControllerRequest *req, GetNavReconstructTimeDone done);
	void GetNavReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetNavReconstructTime(const DSPControllerRequest *req);

	void GetJamReconstructTime(const DSPControllerRequest *req, GetJamReconstructTimeDone done);
	void GetJamReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx);
	WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> async_GetJamReconstructTime(const DSPControllerRequest *req);

public:
	TRPCHttpClient(const char *host, unsigned short port);
	TRPCHttpClient(const struct srpc::RPCClientParams *params);

public:
	srpc::TRPCHttpClientTask *create_LoadSarApp_task(LoadSarAppDone done);
	srpc::TRPCHttpClientTask *create_StartSarApp_task(StartSarAppDone done);
	srpc::TRPCHttpClientTask *create_StopSarApp_task(StopSarAppDone done);
	srpc::TRPCHttpClientTask *create_SwitchSarApp_task(SwitchSarAppDone done);
	srpc::TRPCHttpClientTask *create_LoadElecReco_task(LoadElecRecoDone done);
	srpc::TRPCHttpClientTask *create_StartElecReco_task(StartElecRecoDone done);
	srpc::TRPCHttpClientTask *create_StopElecReco_task(StopElecRecoDone done);
	srpc::TRPCHttpClientTask *create_SwitchElecReco_task(SwitchElecRecoDone done);
	srpc::TRPCHttpClientTask *create_LoadCommunication_task(LoadCommunicationDone done);
	srpc::TRPCHttpClientTask *create_StartCommunication_task(StartCommunicationDone done);
	srpc::TRPCHttpClientTask *create_StopCommunication_task(StopCommunicationDone done);
	srpc::TRPCHttpClientTask *create_SwitchCommunication_task(SwitchCommunicationDone done);
	srpc::TRPCHttpClientTask *create_ConfigCommunication_task(ConfigCommunicationDone done);
	srpc::TRPCHttpClientTask *create_LoadNavigation_task(LoadNavigationDone done);
	srpc::TRPCHttpClientTask *create_StartNavigation_task(StartNavigationDone done);
	srpc::TRPCHttpClientTask *create_StopNavigation_task(StopNavigationDone done);
	srpc::TRPCHttpClientTask *create_SwitchNavigation_task(SwitchNavigationDone done);
	srpc::TRPCHttpClientTask *create_ConfigNavigation_task(ConfigNavigationDone done);
	srpc::TRPCHttpClientTask *create_LoadElectricJam_task(LoadElectricJamDone done);
	srpc::TRPCHttpClientTask *create_StartElectricJam_task(StartElectricJamDone done);
	srpc::TRPCHttpClientTask *create_StopElectricJam_task(StopElectricJamDone done);
	srpc::TRPCHttpClientTask *create_SwitchElectricJam_task(SwitchElectricJamDone done);
	srpc::TRPCHttpClientTask *create_ConfigElectricJam_task(ConfigElectricJamDone done);
	srpc::TRPCHttpClientTask *create_GetComReconstructTime_task(GetComReconstructTimeDone done);
	srpc::TRPCHttpClientTask *create_GetSarReconstructTime_task(GetSarReconstructTimeDone done);
	srpc::TRPCHttpClientTask *create_GetElecReconstructTime_task(GetElecReconstructTimeDone done);
	srpc::TRPCHttpClientTask *create_GetNavReconstructTime_task(GetNavReconstructTimeDone done);
	srpc::TRPCHttpClientTask *create_GetJamReconstructTime_task(GetJamReconstructTimeDone done);
};

///// implements detials /////

inline Service::Service(): srpc::RPCService("DSPController")
{
	this->srpc::RPCService::add_method("LoadSarApp",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::LoadSarApp);
		});

	this->srpc::RPCService::add_method("StartSarApp",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::StartSarApp);
		});

	this->srpc::RPCService::add_method("StopSarApp",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::StopSarApp);
		});

	this->srpc::RPCService::add_method("SwitchSarApp",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::SwitchSarApp);
		});

	this->srpc::RPCService::add_method("LoadElecReco",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::LoadElecReco);
		});

	this->srpc::RPCService::add_method("StartElecReco",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::StartElecReco);
		});

	this->srpc::RPCService::add_method("StopElecReco",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::StopElecReco);
		});

	this->srpc::RPCService::add_method("SwitchElecReco",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::SwitchElecReco);
		});

	this->srpc::RPCService::add_method("LoadCommunication",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::LoadCommunication);
		});

	this->srpc::RPCService::add_method("StartCommunication",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::StartCommunication);
		});

	this->srpc::RPCService::add_method("StopCommunication",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::StopCommunication);
		});

	this->srpc::RPCService::add_method("SwitchCommunication",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::SwitchCommunication);
		});

	this->srpc::RPCService::add_method("ConfigCommunication",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::ConfigCommunication);
		});

	this->srpc::RPCService::add_method("LoadNavigation",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::LoadNavigation);
		});

	this->srpc::RPCService::add_method("StartNavigation",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::StartNavigation);
		});

	this->srpc::RPCService::add_method("StopNavigation",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::StopNavigation);
		});

	this->srpc::RPCService::add_method("SwitchNavigation",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::SwitchNavigation);
		});

	this->srpc::RPCService::add_method("ConfigNavigation",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::ConfigNavigation);
		});

	this->srpc::RPCService::add_method("LoadElectricJam",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::LoadElectricJam);
		});

	this->srpc::RPCService::add_method("StartElectricJam",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::StartElectricJam);
		});

	this->srpc::RPCService::add_method("StopElectricJam",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::StopElectricJam);
		});

	this->srpc::RPCService::add_method("SwitchElectricJam",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::SwitchElectricJam);
		});

	this->srpc::RPCService::add_method("ConfigElectricJam",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::ConfigElectricJam);
		});

	this->srpc::RPCService::add_method("GetComReconstructTime",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::GetComReconstructTime);
		});

	this->srpc::RPCService::add_method("GetSarReconstructTime",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::GetSarReconstructTime);
		});

	this->srpc::RPCService::add_method("GetElecReconstructTime",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::GetElecReconstructTime);
		});

	this->srpc::RPCService::add_method("GetNavReconstructTime",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::GetNavReconstructTime);
		});

	this->srpc::RPCService::add_method("GetJamReconstructTime",
		[this](srpc::RPCWorker& worker) ->int {
			return ServiceRPCCallImpl(this, worker, &Service::GetJamReconstructTime);
		});
}

inline SRPCClient::SRPCClient(const char *host, unsigned short port):
	srpc::SRPCClient("DSPController")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::SRPCClient::init(&params);
}

inline SRPCClient::SRPCClient(const struct srpc::RPCClientParams *params):
	srpc::SRPCClient("DSPController")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::SRPCClient::init(temp);
}

inline void SRPCClient::LoadSarApp(const DSPControllerRequest *req, LoadSarAppDone done)
{
	auto *task = this->create_rpc_client_task("LoadSarApp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::LoadSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_LoadSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::StartSarApp(const DSPControllerRequest *req, StartSarAppDone done)
{
	auto *task = this->create_rpc_client_task("StartSarApp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::StartSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_StartSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::StopSarApp(const DSPControllerRequest *req, StopSarAppDone done)
{
	auto *task = this->create_rpc_client_task("StopSarApp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::StopSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_StopSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::SwitchSarApp(const DSPControllerRequest *req, SwitchSarAppDone done)
{
	auto *task = this->create_rpc_client_task("SwitchSarApp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::SwitchSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_SwitchSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::LoadElecReco(const DSPControllerRequest *req, LoadElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("LoadElecReco", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::LoadElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_LoadElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::StartElecReco(const DSPControllerRequest *req, StartElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("StartElecReco", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::StartElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_StartElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::StopElecReco(const DSPControllerRequest *req, StopElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("StopElecReco", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::StopElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_StopElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::SwitchElecReco(const DSPControllerRequest *req, SwitchElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("SwitchElecReco", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::SwitchElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_SwitchElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::LoadCommunication(const DSPControllerRequest *req, LoadCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("LoadCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::LoadCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_LoadCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::StartCommunication(const DSPControllerRequest *req, StartCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("StartCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::StartCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_StartCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::StopCommunication(const DSPControllerRequest *req, StopCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("StopCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::StopCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_StopCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::SwitchCommunication(const DSPControllerRequest *req, SwitchCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("SwitchCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::SwitchCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_SwitchCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::ConfigCommunication(const ConfigRequest *req, ConfigCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("ConfigCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::ConfigCommunication(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_ConfigCommunication(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("ConfigCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::LoadNavigation(const DSPControllerRequest *req, LoadNavigationDone done)
{
	auto *task = this->create_rpc_client_task("LoadNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::LoadNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_LoadNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::StartNavigation(const DSPControllerRequest *req, StartNavigationDone done)
{
	auto *task = this->create_rpc_client_task("StartNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::StartNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_StartNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::StopNavigation(const DSPControllerRequest *req, StopNavigationDone done)
{
	auto *task = this->create_rpc_client_task("StopNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::StopNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_StopNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::SwitchNavigation(const DSPControllerRequest *req, SwitchNavigationDone done)
{
	auto *task = this->create_rpc_client_task("SwitchNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::SwitchNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_SwitchNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::ConfigNavigation(const ConfigRequest *req, ConfigNavigationDone done)
{
	auto *task = this->create_rpc_client_task("ConfigNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::ConfigNavigation(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_ConfigNavigation(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("ConfigNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::LoadElectricJam(const DSPControllerRequest *req, LoadElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("LoadElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::LoadElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_LoadElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::StartElectricJam(const DSPControllerRequest *req, StartElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("StartElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::StartElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_StartElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::StopElectricJam(const DSPControllerRequest *req, StopElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("StopElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::StopElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_StopElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::SwitchElectricJam(const DSPControllerRequest *req, SwitchElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("SwitchElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::SwitchElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_SwitchElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::ConfigElectricJam(const ConfigRequest *req, ConfigElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("ConfigElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::ConfigElectricJam(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCClient::async_ConfigElectricJam(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("ConfigElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::GetComReconstructTime(const DSPControllerRequest *req, GetComReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetComReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::GetComReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetComReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> SRPCClient::async_GetComReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetComReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::GetSarReconstructTime(const DSPControllerRequest *req, GetSarReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetSarReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::GetSarReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetSarReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> SRPCClient::async_GetSarReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetSarReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::GetElecReconstructTime(const DSPControllerRequest *req, GetElecReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetElecReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::GetElecReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetElecReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> SRPCClient::async_GetElecReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetElecReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::GetNavReconstructTime(const DSPControllerRequest *req, GetNavReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetNavReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::GetNavReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetNavReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> SRPCClient::async_GetNavReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetNavReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCClient::GetJamReconstructTime(const DSPControllerRequest *req, GetJamReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetJamReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCClient::GetJamReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetJamReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> SRPCClient::async_GetJamReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetJamReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::SRPCClientTask *SRPCClient::create_LoadSarApp_task(LoadSarAppDone done)
{
	return this->create_rpc_client_task("LoadSarApp", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_StartSarApp_task(StartSarAppDone done)
{
	return this->create_rpc_client_task("StartSarApp", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_StopSarApp_task(StopSarAppDone done)
{
	return this->create_rpc_client_task("StopSarApp", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_SwitchSarApp_task(SwitchSarAppDone done)
{
	return this->create_rpc_client_task("SwitchSarApp", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_LoadElecReco_task(LoadElecRecoDone done)
{
	return this->create_rpc_client_task("LoadElecReco", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_StartElecReco_task(StartElecRecoDone done)
{
	return this->create_rpc_client_task("StartElecReco", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_StopElecReco_task(StopElecRecoDone done)
{
	return this->create_rpc_client_task("StopElecReco", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_SwitchElecReco_task(SwitchElecRecoDone done)
{
	return this->create_rpc_client_task("SwitchElecReco", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_LoadCommunication_task(LoadCommunicationDone done)
{
	return this->create_rpc_client_task("LoadCommunication", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_StartCommunication_task(StartCommunicationDone done)
{
	return this->create_rpc_client_task("StartCommunication", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_StopCommunication_task(StopCommunicationDone done)
{
	return this->create_rpc_client_task("StopCommunication", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_SwitchCommunication_task(SwitchCommunicationDone done)
{
	return this->create_rpc_client_task("SwitchCommunication", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_ConfigCommunication_task(ConfigCommunicationDone done)
{
	return this->create_rpc_client_task("ConfigCommunication", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_LoadNavigation_task(LoadNavigationDone done)
{
	return this->create_rpc_client_task("LoadNavigation", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_StartNavigation_task(StartNavigationDone done)
{
	return this->create_rpc_client_task("StartNavigation", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_StopNavigation_task(StopNavigationDone done)
{
	return this->create_rpc_client_task("StopNavigation", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_SwitchNavigation_task(SwitchNavigationDone done)
{
	return this->create_rpc_client_task("SwitchNavigation", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_ConfigNavigation_task(ConfigNavigationDone done)
{
	return this->create_rpc_client_task("ConfigNavigation", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_LoadElectricJam_task(LoadElectricJamDone done)
{
	return this->create_rpc_client_task("LoadElectricJam", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_StartElectricJam_task(StartElectricJamDone done)
{
	return this->create_rpc_client_task("StartElectricJam", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_StopElectricJam_task(StopElectricJamDone done)
{
	return this->create_rpc_client_task("StopElectricJam", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_SwitchElectricJam_task(SwitchElectricJamDone done)
{
	return this->create_rpc_client_task("SwitchElectricJam", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_ConfigElectricJam_task(ConfigElectricJamDone done)
{
	return this->create_rpc_client_task("ConfigElectricJam", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_GetComReconstructTime_task(GetComReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetComReconstructTime", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_GetSarReconstructTime_task(GetSarReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetSarReconstructTime", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_GetElecReconstructTime_task(GetElecReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetElecReconstructTime", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_GetNavReconstructTime_task(GetNavReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetNavReconstructTime", std::move(done));
}

inline srpc::SRPCClientTask *SRPCClient::create_GetJamReconstructTime_task(GetJamReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetJamReconstructTime", std::move(done));
}

inline SRPCHttpClient::SRPCHttpClient(const char *host, unsigned short port):
	srpc::SRPCHttpClient("DSPController")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::SRPCHttpClient::init(&params);
}

inline SRPCHttpClient::SRPCHttpClient(const struct srpc::RPCClientParams *params):
	srpc::SRPCHttpClient("DSPController")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::SRPCHttpClient::init(temp);
}

inline void SRPCHttpClient::LoadSarApp(const DSPControllerRequest *req, LoadSarAppDone done)
{
	auto *task = this->create_rpc_client_task("LoadSarApp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::LoadSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_LoadSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::StartSarApp(const DSPControllerRequest *req, StartSarAppDone done)
{
	auto *task = this->create_rpc_client_task("StartSarApp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::StartSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_StartSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::StopSarApp(const DSPControllerRequest *req, StopSarAppDone done)
{
	auto *task = this->create_rpc_client_task("StopSarApp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::StopSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_StopSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::SwitchSarApp(const DSPControllerRequest *req, SwitchSarAppDone done)
{
	auto *task = this->create_rpc_client_task("SwitchSarApp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::SwitchSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_SwitchSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::LoadElecReco(const DSPControllerRequest *req, LoadElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("LoadElecReco", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::LoadElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_LoadElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::StartElecReco(const DSPControllerRequest *req, StartElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("StartElecReco", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::StartElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_StartElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::StopElecReco(const DSPControllerRequest *req, StopElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("StopElecReco", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::StopElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_StopElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::SwitchElecReco(const DSPControllerRequest *req, SwitchElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("SwitchElecReco", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::SwitchElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_SwitchElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::LoadCommunication(const DSPControllerRequest *req, LoadCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("LoadCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::LoadCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_LoadCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::StartCommunication(const DSPControllerRequest *req, StartCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("StartCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::StartCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_StartCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::StopCommunication(const DSPControllerRequest *req, StopCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("StopCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::StopCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_StopCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::SwitchCommunication(const DSPControllerRequest *req, SwitchCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("SwitchCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::SwitchCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_SwitchCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::ConfigCommunication(const ConfigRequest *req, ConfigCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("ConfigCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::ConfigCommunication(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_ConfigCommunication(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("ConfigCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::LoadNavigation(const DSPControllerRequest *req, LoadNavigationDone done)
{
	auto *task = this->create_rpc_client_task("LoadNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::LoadNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_LoadNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::StartNavigation(const DSPControllerRequest *req, StartNavigationDone done)
{
	auto *task = this->create_rpc_client_task("StartNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::StartNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_StartNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::StopNavigation(const DSPControllerRequest *req, StopNavigationDone done)
{
	auto *task = this->create_rpc_client_task("StopNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::StopNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_StopNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::SwitchNavigation(const DSPControllerRequest *req, SwitchNavigationDone done)
{
	auto *task = this->create_rpc_client_task("SwitchNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::SwitchNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_SwitchNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::ConfigNavigation(const ConfigRequest *req, ConfigNavigationDone done)
{
	auto *task = this->create_rpc_client_task("ConfigNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::ConfigNavigation(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_ConfigNavigation(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("ConfigNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::LoadElectricJam(const DSPControllerRequest *req, LoadElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("LoadElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::LoadElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_LoadElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::StartElectricJam(const DSPControllerRequest *req, StartElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("StartElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::StartElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_StartElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::StopElectricJam(const DSPControllerRequest *req, StopElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("StopElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::StopElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_StopElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::SwitchElectricJam(const DSPControllerRequest *req, SwitchElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("SwitchElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::SwitchElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_SwitchElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::ConfigElectricJam(const ConfigRequest *req, ConfigElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("ConfigElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::ConfigElectricJam(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_ConfigElectricJam(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("ConfigElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::GetComReconstructTime(const DSPControllerRequest *req, GetComReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetComReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::GetComReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetComReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_GetComReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetComReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::GetSarReconstructTime(const DSPControllerRequest *req, GetSarReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetSarReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::GetSarReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetSarReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_GetSarReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetSarReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::GetElecReconstructTime(const DSPControllerRequest *req, GetElecReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetElecReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::GetElecReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetElecReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_GetElecReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetElecReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::GetNavReconstructTime(const DSPControllerRequest *req, GetNavReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetNavReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::GetNavReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetNavReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_GetNavReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetNavReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void SRPCHttpClient::GetJamReconstructTime(const DSPControllerRequest *req, GetJamReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetJamReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void SRPCHttpClient::GetJamReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetJamReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> SRPCHttpClient::async_GetJamReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetJamReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_LoadSarApp_task(LoadSarAppDone done)
{
	return this->create_rpc_client_task("LoadSarApp", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_StartSarApp_task(StartSarAppDone done)
{
	return this->create_rpc_client_task("StartSarApp", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_StopSarApp_task(StopSarAppDone done)
{
	return this->create_rpc_client_task("StopSarApp", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_SwitchSarApp_task(SwitchSarAppDone done)
{
	return this->create_rpc_client_task("SwitchSarApp", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_LoadElecReco_task(LoadElecRecoDone done)
{
	return this->create_rpc_client_task("LoadElecReco", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_StartElecReco_task(StartElecRecoDone done)
{
	return this->create_rpc_client_task("StartElecReco", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_StopElecReco_task(StopElecRecoDone done)
{
	return this->create_rpc_client_task("StopElecReco", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_SwitchElecReco_task(SwitchElecRecoDone done)
{
	return this->create_rpc_client_task("SwitchElecReco", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_LoadCommunication_task(LoadCommunicationDone done)
{
	return this->create_rpc_client_task("LoadCommunication", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_StartCommunication_task(StartCommunicationDone done)
{
	return this->create_rpc_client_task("StartCommunication", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_StopCommunication_task(StopCommunicationDone done)
{
	return this->create_rpc_client_task("StopCommunication", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_SwitchCommunication_task(SwitchCommunicationDone done)
{
	return this->create_rpc_client_task("SwitchCommunication", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_ConfigCommunication_task(ConfigCommunicationDone done)
{
	return this->create_rpc_client_task("ConfigCommunication", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_LoadNavigation_task(LoadNavigationDone done)
{
	return this->create_rpc_client_task("LoadNavigation", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_StartNavigation_task(StartNavigationDone done)
{
	return this->create_rpc_client_task("StartNavigation", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_StopNavigation_task(StopNavigationDone done)
{
	return this->create_rpc_client_task("StopNavigation", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_SwitchNavigation_task(SwitchNavigationDone done)
{
	return this->create_rpc_client_task("SwitchNavigation", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_ConfigNavigation_task(ConfigNavigationDone done)
{
	return this->create_rpc_client_task("ConfigNavigation", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_LoadElectricJam_task(LoadElectricJamDone done)
{
	return this->create_rpc_client_task("LoadElectricJam", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_StartElectricJam_task(StartElectricJamDone done)
{
	return this->create_rpc_client_task("StartElectricJam", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_StopElectricJam_task(StopElectricJamDone done)
{
	return this->create_rpc_client_task("StopElectricJam", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_SwitchElectricJam_task(SwitchElectricJamDone done)
{
	return this->create_rpc_client_task("SwitchElectricJam", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_ConfigElectricJam_task(ConfigElectricJamDone done)
{
	return this->create_rpc_client_task("ConfigElectricJam", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_GetComReconstructTime_task(GetComReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetComReconstructTime", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_GetSarReconstructTime_task(GetSarReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetSarReconstructTime", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_GetElecReconstructTime_task(GetElecReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetElecReconstructTime", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_GetNavReconstructTime_task(GetNavReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetNavReconstructTime", std::move(done));
}

inline srpc::SRPCHttpClientTask *SRPCHttpClient::create_GetJamReconstructTime_task(GetJamReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetJamReconstructTime", std::move(done));
}

inline BRPCClient::BRPCClient(const char *host, unsigned short port):
	srpc::BRPCClient("DSPController")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::BRPCClient::init(&params);
}

inline BRPCClient::BRPCClient(const struct srpc::RPCClientParams *params):
	srpc::BRPCClient("DSPController")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::BRPCClient::init(temp);
}

inline void BRPCClient::LoadSarApp(const DSPControllerRequest *req, LoadSarAppDone done)
{
	auto *task = this->create_rpc_client_task("LoadSarApp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::LoadSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_LoadSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::StartSarApp(const DSPControllerRequest *req, StartSarAppDone done)
{
	auto *task = this->create_rpc_client_task("StartSarApp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::StartSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_StartSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::StopSarApp(const DSPControllerRequest *req, StopSarAppDone done)
{
	auto *task = this->create_rpc_client_task("StopSarApp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::StopSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_StopSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::SwitchSarApp(const DSPControllerRequest *req, SwitchSarAppDone done)
{
	auto *task = this->create_rpc_client_task("SwitchSarApp", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::SwitchSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_SwitchSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::LoadElecReco(const DSPControllerRequest *req, LoadElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("LoadElecReco", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::LoadElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_LoadElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::StartElecReco(const DSPControllerRequest *req, StartElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("StartElecReco", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::StartElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_StartElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::StopElecReco(const DSPControllerRequest *req, StopElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("StopElecReco", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::StopElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_StopElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::SwitchElecReco(const DSPControllerRequest *req, SwitchElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("SwitchElecReco", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::SwitchElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_SwitchElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::LoadCommunication(const DSPControllerRequest *req, LoadCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("LoadCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::LoadCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_LoadCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::StartCommunication(const DSPControllerRequest *req, StartCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("StartCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::StartCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_StartCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::StopCommunication(const DSPControllerRequest *req, StopCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("StopCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::StopCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_StopCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::SwitchCommunication(const DSPControllerRequest *req, SwitchCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("SwitchCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::SwitchCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_SwitchCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::ConfigCommunication(const ConfigRequest *req, ConfigCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("ConfigCommunication", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::ConfigCommunication(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_ConfigCommunication(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("ConfigCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::LoadNavigation(const DSPControllerRequest *req, LoadNavigationDone done)
{
	auto *task = this->create_rpc_client_task("LoadNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::LoadNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_LoadNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::StartNavigation(const DSPControllerRequest *req, StartNavigationDone done)
{
	auto *task = this->create_rpc_client_task("StartNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::StartNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_StartNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::StopNavigation(const DSPControllerRequest *req, StopNavigationDone done)
{
	auto *task = this->create_rpc_client_task("StopNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::StopNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_StopNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::SwitchNavigation(const DSPControllerRequest *req, SwitchNavigationDone done)
{
	auto *task = this->create_rpc_client_task("SwitchNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::SwitchNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_SwitchNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::ConfigNavigation(const ConfigRequest *req, ConfigNavigationDone done)
{
	auto *task = this->create_rpc_client_task("ConfigNavigation", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::ConfigNavigation(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_ConfigNavigation(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("ConfigNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::LoadElectricJam(const DSPControllerRequest *req, LoadElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("LoadElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::LoadElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_LoadElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::StartElectricJam(const DSPControllerRequest *req, StartElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("StartElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::StartElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_StartElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::StopElectricJam(const DSPControllerRequest *req, StopElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("StopElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::StopElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_StopElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::SwitchElectricJam(const DSPControllerRequest *req, SwitchElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("SwitchElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::SwitchElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_SwitchElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::ConfigElectricJam(const ConfigRequest *req, ConfigElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("ConfigElectricJam", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::ConfigElectricJam(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> BRPCClient::async_ConfigElectricJam(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("ConfigElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::GetComReconstructTime(const DSPControllerRequest *req, GetComReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetComReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::GetComReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetComReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> BRPCClient::async_GetComReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetComReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::GetSarReconstructTime(const DSPControllerRequest *req, GetSarReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetSarReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::GetSarReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetSarReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> BRPCClient::async_GetSarReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetSarReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::GetElecReconstructTime(const DSPControllerRequest *req, GetElecReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetElecReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::GetElecReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetElecReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> BRPCClient::async_GetElecReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetElecReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::GetNavReconstructTime(const DSPControllerRequest *req, GetNavReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetNavReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::GetNavReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetNavReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> BRPCClient::async_GetNavReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetNavReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void BRPCClient::GetJamReconstructTime(const DSPControllerRequest *req, GetJamReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetJamReconstructTime", std::move(done));

	task->serialize_input(req);
	task->start();
}

inline void BRPCClient::GetJamReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetJamReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> BRPCClient::async_GetJamReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetJamReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::BRPCClientTask *BRPCClient::create_LoadSarApp_task(LoadSarAppDone done)
{
	return this->create_rpc_client_task("LoadSarApp", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_StartSarApp_task(StartSarAppDone done)
{
	return this->create_rpc_client_task("StartSarApp", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_StopSarApp_task(StopSarAppDone done)
{
	return this->create_rpc_client_task("StopSarApp", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_SwitchSarApp_task(SwitchSarAppDone done)
{
	return this->create_rpc_client_task("SwitchSarApp", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_LoadElecReco_task(LoadElecRecoDone done)
{
	return this->create_rpc_client_task("LoadElecReco", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_StartElecReco_task(StartElecRecoDone done)
{
	return this->create_rpc_client_task("StartElecReco", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_StopElecReco_task(StopElecRecoDone done)
{
	return this->create_rpc_client_task("StopElecReco", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_SwitchElecReco_task(SwitchElecRecoDone done)
{
	return this->create_rpc_client_task("SwitchElecReco", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_LoadCommunication_task(LoadCommunicationDone done)
{
	return this->create_rpc_client_task("LoadCommunication", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_StartCommunication_task(StartCommunicationDone done)
{
	return this->create_rpc_client_task("StartCommunication", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_StopCommunication_task(StopCommunicationDone done)
{
	return this->create_rpc_client_task("StopCommunication", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_SwitchCommunication_task(SwitchCommunicationDone done)
{
	return this->create_rpc_client_task("SwitchCommunication", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_ConfigCommunication_task(ConfigCommunicationDone done)
{
	return this->create_rpc_client_task("ConfigCommunication", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_LoadNavigation_task(LoadNavigationDone done)
{
	return this->create_rpc_client_task("LoadNavigation", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_StartNavigation_task(StartNavigationDone done)
{
	return this->create_rpc_client_task("StartNavigation", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_StopNavigation_task(StopNavigationDone done)
{
	return this->create_rpc_client_task("StopNavigation", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_SwitchNavigation_task(SwitchNavigationDone done)
{
	return this->create_rpc_client_task("SwitchNavigation", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_ConfigNavigation_task(ConfigNavigationDone done)
{
	return this->create_rpc_client_task("ConfigNavigation", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_LoadElectricJam_task(LoadElectricJamDone done)
{
	return this->create_rpc_client_task("LoadElectricJam", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_StartElectricJam_task(StartElectricJamDone done)
{
	return this->create_rpc_client_task("StartElectricJam", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_StopElectricJam_task(StopElectricJamDone done)
{
	return this->create_rpc_client_task("StopElectricJam", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_SwitchElectricJam_task(SwitchElectricJamDone done)
{
	return this->create_rpc_client_task("SwitchElectricJam", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_ConfigElectricJam_task(ConfigElectricJamDone done)
{
	return this->create_rpc_client_task("ConfigElectricJam", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_GetComReconstructTime_task(GetComReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetComReconstructTime", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_GetSarReconstructTime_task(GetSarReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetSarReconstructTime", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_GetElecReconstructTime_task(GetElecReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetElecReconstructTime", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_GetNavReconstructTime_task(GetNavReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetNavReconstructTime", std::move(done));
}

inline srpc::BRPCClientTask *BRPCClient::create_GetJamReconstructTime_task(GetJamReconstructTimeDone done)
{
	return this->create_rpc_client_task("GetJamReconstructTime", std::move(done));
}

inline TRPCClient::TRPCClient(const char *host, unsigned short port):
	srpc::TRPCClient("DSPController")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::TRPCClient::init(&params);
}

inline TRPCClient::TRPCClient(const struct srpc::RPCClientParams *params):
	srpc::TRPCClient("DSPController")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::TRPCClient::init(temp);
}

inline void TRPCClient::LoadSarApp(const DSPControllerRequest *req, LoadSarAppDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/LoadSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::LoadSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_LoadSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/LoadSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::StartSarApp(const DSPControllerRequest *req, StartSarAppDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StartSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::StartSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_StartSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/StartSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::StopSarApp(const DSPControllerRequest *req, StopSarAppDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StopSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::StopSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_StopSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/StopSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::SwitchSarApp(const DSPControllerRequest *req, SwitchSarAppDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/SwitchSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::SwitchSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_SwitchSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/SwitchSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::LoadElecReco(const DSPControllerRequest *req, LoadElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/LoadElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::LoadElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_LoadElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/LoadElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::StartElecReco(const DSPControllerRequest *req, StartElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StartElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::StartElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_StartElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/StartElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::StopElecReco(const DSPControllerRequest *req, StopElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StopElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::StopElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_StopElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/StopElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::SwitchElecReco(const DSPControllerRequest *req, SwitchElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/SwitchElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::SwitchElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_SwitchElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/SwitchElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::LoadCommunication(const DSPControllerRequest *req, LoadCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/LoadCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::LoadCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_LoadCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/LoadCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::StartCommunication(const DSPControllerRequest *req, StartCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StartCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::StartCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_StartCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/StartCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::StopCommunication(const DSPControllerRequest *req, StopCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StopCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::StopCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_StopCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/StopCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::SwitchCommunication(const DSPControllerRequest *req, SwitchCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/SwitchCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::SwitchCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_SwitchCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/SwitchCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::ConfigCommunication(const ConfigRequest *req, ConfigCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/ConfigCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::ConfigCommunication(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_ConfigCommunication(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/ConfigCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::LoadNavigation(const DSPControllerRequest *req, LoadNavigationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/LoadNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::LoadNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_LoadNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/LoadNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::StartNavigation(const DSPControllerRequest *req, StartNavigationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StartNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::StartNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_StartNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/StartNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::StopNavigation(const DSPControllerRequest *req, StopNavigationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StopNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::StopNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_StopNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/StopNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::SwitchNavigation(const DSPControllerRequest *req, SwitchNavigationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/SwitchNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::SwitchNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_SwitchNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/SwitchNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::ConfigNavigation(const ConfigRequest *req, ConfigNavigationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/ConfigNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::ConfigNavigation(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_ConfigNavigation(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/ConfigNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::LoadElectricJam(const DSPControllerRequest *req, LoadElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/LoadElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::LoadElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_LoadElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/LoadElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::StartElectricJam(const DSPControllerRequest *req, StartElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StartElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::StartElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_StartElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/StartElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::StopElectricJam(const DSPControllerRequest *req, StopElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StopElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::StopElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_StopElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/StopElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::SwitchElectricJam(const DSPControllerRequest *req, SwitchElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/SwitchElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::SwitchElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_SwitchElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/SwitchElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::ConfigElectricJam(const ConfigRequest *req, ConfigElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/ConfigElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::ConfigElectricJam(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCClient::async_ConfigElectricJam(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("/DSPController/ConfigElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::GetComReconstructTime(const DSPControllerRequest *req, GetComReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/GetComReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::GetComReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetComReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> TRPCClient::async_GetComReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("/DSPController/GetComReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::GetSarReconstructTime(const DSPControllerRequest *req, GetSarReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/GetSarReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::GetSarReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetSarReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> TRPCClient::async_GetSarReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("/DSPController/GetSarReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::GetElecReconstructTime(const DSPControllerRequest *req, GetElecReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/GetElecReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::GetElecReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetElecReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> TRPCClient::async_GetElecReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("/DSPController/GetElecReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::GetNavReconstructTime(const DSPControllerRequest *req, GetNavReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/GetNavReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::GetNavReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetNavReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> TRPCClient::async_GetNavReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("/DSPController/GetNavReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCClient::GetJamReconstructTime(const DSPControllerRequest *req, GetJamReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/GetJamReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCClient::GetJamReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetJamReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> TRPCClient::async_GetJamReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("/DSPController/GetJamReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::TRPCClientTask *TRPCClient::create_LoadSarApp_task(LoadSarAppDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/LoadSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_StartSarApp_task(StartSarAppDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StartSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_StopSarApp_task(StopSarAppDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StopSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_SwitchSarApp_task(SwitchSarAppDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/SwitchSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_LoadElecReco_task(LoadElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/LoadElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_StartElecReco_task(StartElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StartElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_StopElecReco_task(StopElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StopElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_SwitchElecReco_task(SwitchElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/SwitchElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_LoadCommunication_task(LoadCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/LoadCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_StartCommunication_task(StartCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StartCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_StopCommunication_task(StopCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StopCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_SwitchCommunication_task(SwitchCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/SwitchCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_ConfigCommunication_task(ConfigCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/ConfigCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_LoadNavigation_task(LoadNavigationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/LoadNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_StartNavigation_task(StartNavigationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StartNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_StopNavigation_task(StopNavigationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StopNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_SwitchNavigation_task(SwitchNavigationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/SwitchNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_ConfigNavigation_task(ConfigNavigationDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/ConfigNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_LoadElectricJam_task(LoadElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/LoadElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_StartElectricJam_task(StartElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StartElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_StopElectricJam_task(StopElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/StopElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_SwitchElectricJam_task(SwitchElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/SwitchElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_ConfigElectricJam_task(ConfigElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/ConfigElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_GetComReconstructTime_task(GetComReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/GetComReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_GetSarReconstructTime_task(GetSarReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/GetSarReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_GetElecReconstructTime_task(GetElecReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/GetElecReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_GetNavReconstructTime_task(GetNavReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/GetNavReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCClientTask *TRPCClient::create_GetJamReconstructTime_task(GetJamReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("/DSPController/GetJamReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline TRPCHttpClient::TRPCHttpClient(const char *host, unsigned short port):
	srpc::TRPCHttpClient("DSPController")
{
	struct srpc::RPCClientParams params = srpc::RPC_CLIENT_PARAMS_DEFAULT;
	
	params.host = host;
	params.port = port;
	this->srpc::TRPCHttpClient::init(&params);
}

inline TRPCHttpClient::TRPCHttpClient(const struct srpc::RPCClientParams *params):
	srpc::TRPCHttpClient("DSPController")
{
	const struct srpc::RPCClientParams *temp = params;
	struct srpc::RPCClientParams temp_params;
	
	this->srpc::TRPCHttpClient::init(temp);
}

inline void TRPCHttpClient::LoadSarApp(const DSPControllerRequest *req, LoadSarAppDone done)
{
	auto *task = this->create_rpc_client_task("LoadSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::LoadSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_LoadSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::StartSarApp(const DSPControllerRequest *req, StartSarAppDone done)
{
	auto *task = this->create_rpc_client_task("StartSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::StartSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_StartSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::StopSarApp(const DSPControllerRequest *req, StopSarAppDone done)
{
	auto *task = this->create_rpc_client_task("StopSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::StopSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_StopSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::SwitchSarApp(const DSPControllerRequest *req, SwitchSarAppDone done)
{
	auto *task = this->create_rpc_client_task("SwitchSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::SwitchSarApp(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchSarApp(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_SwitchSarApp(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchSarApp", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::LoadElecReco(const DSPControllerRequest *req, LoadElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("LoadElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::LoadElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_LoadElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::StartElecReco(const DSPControllerRequest *req, StartElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("StartElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::StartElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_StartElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::StopElecReco(const DSPControllerRequest *req, StopElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("StopElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::StopElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_StopElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::SwitchElecReco(const DSPControllerRequest *req, SwitchElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("SwitchElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::SwitchElecReco(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchElecReco(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_SwitchElecReco(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchElecReco", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::LoadCommunication(const DSPControllerRequest *req, LoadCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("LoadCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::LoadCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_LoadCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::StartCommunication(const DSPControllerRequest *req, StartCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("StartCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::StartCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_StartCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::StopCommunication(const DSPControllerRequest *req, StopCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("StopCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::StopCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_StopCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::SwitchCommunication(const DSPControllerRequest *req, SwitchCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("SwitchCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::SwitchCommunication(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_SwitchCommunication(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::ConfigCommunication(const ConfigRequest *req, ConfigCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("ConfigCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::ConfigCommunication(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigCommunication(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_ConfigCommunication(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("ConfigCommunication", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::LoadNavigation(const DSPControllerRequest *req, LoadNavigationDone done)
{
	auto *task = this->create_rpc_client_task("LoadNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::LoadNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_LoadNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::StartNavigation(const DSPControllerRequest *req, StartNavigationDone done)
{
	auto *task = this->create_rpc_client_task("StartNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::StartNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_StartNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::StopNavigation(const DSPControllerRequest *req, StopNavigationDone done)
{
	auto *task = this->create_rpc_client_task("StopNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::StopNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_StopNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::SwitchNavigation(const DSPControllerRequest *req, SwitchNavigationDone done)
{
	auto *task = this->create_rpc_client_task("SwitchNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::SwitchNavigation(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_SwitchNavigation(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::ConfigNavigation(const ConfigRequest *req, ConfigNavigationDone done)
{
	auto *task = this->create_rpc_client_task("ConfigNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::ConfigNavigation(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigNavigation(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_ConfigNavigation(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("ConfigNavigation", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::LoadElectricJam(const DSPControllerRequest *req, LoadElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("LoadElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::LoadElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_LoadElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_LoadElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("LoadElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::StartElectricJam(const DSPControllerRequest *req, StartElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("StartElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::StartElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StartElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_StartElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StartElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::StopElectricJam(const DSPControllerRequest *req, StopElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("StopElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::StopElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_StopElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_StopElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("StopElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::SwitchElectricJam(const DSPControllerRequest *req, SwitchElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("SwitchElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::SwitchElectricJam(const DSPControllerRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_SwitchElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_SwitchElectricJam(const DSPControllerRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("SwitchElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::ConfigElectricJam(const ConfigRequest *req, ConfigElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("ConfigElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::ConfigElectricJam(const ConfigRequest *req, DSPControllerResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_ConfigElectricJam(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<DSPControllerResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_ConfigElectricJam(const ConfigRequest *req)
{
	using RESULT = std::pair<DSPControllerResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<DSPControllerResponse>("ConfigElectricJam", srpc::RPCAsyncFutureCallback<DSPControllerResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::GetComReconstructTime(const DSPControllerRequest *req, GetComReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetComReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::GetComReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetComReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_GetComReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetComReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::GetSarReconstructTime(const DSPControllerRequest *req, GetSarReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetSarReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::GetSarReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetSarReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_GetSarReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetSarReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::GetElecReconstructTime(const DSPControllerRequest *req, GetElecReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetElecReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::GetElecReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetElecReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_GetElecReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetElecReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::GetNavReconstructTime(const DSPControllerRequest *req, GetNavReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetNavReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::GetNavReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetNavReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_GetNavReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetNavReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline void TRPCHttpClient::GetJamReconstructTime(const DSPControllerRequest *req, GetJamReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetJamReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->start();
}

inline void TRPCHttpClient::GetJamReconstructTime(const DSPControllerRequest *req, ReconstructTimeResponse *resp, srpc::RPCSyncContext *sync_ctx)
{
	auto res = this->async_GetJamReconstructTime(req).get();

	if (resp && res.second.success)
		*resp = std::move(res.first);

	if (sync_ctx)
		*sync_ctx = std::move(res.second);
}

inline WFFuture<std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>> TRPCHttpClient::async_GetJamReconstructTime(const DSPControllerRequest *req)
{
	using RESULT = std::pair<ReconstructTimeResponse, srpc::RPCSyncContext>;
	auto *pr = new WFPromise<RESULT>();
	auto fr = pr->get_future();
	auto *task = this->create_rpc_client_task<ReconstructTimeResponse>("GetJamReconstructTime", srpc::RPCAsyncFutureCallback<ReconstructTimeResponse>);

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);
	task->serialize_input(req);
	task->user_data = pr;
	task->start();
	return fr;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_LoadSarApp_task(LoadSarAppDone done)
{
	auto *task = this->create_rpc_client_task("LoadSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_StartSarApp_task(StartSarAppDone done)
{
	auto *task = this->create_rpc_client_task("StartSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_StopSarApp_task(StopSarAppDone done)
{
	auto *task = this->create_rpc_client_task("StopSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_SwitchSarApp_task(SwitchSarAppDone done)
{
	auto *task = this->create_rpc_client_task("SwitchSarApp", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_LoadElecReco_task(LoadElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("LoadElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_StartElecReco_task(StartElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("StartElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_StopElecReco_task(StopElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("StopElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_SwitchElecReco_task(SwitchElecRecoDone done)
{
	auto *task = this->create_rpc_client_task("SwitchElecReco", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_LoadCommunication_task(LoadCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("LoadCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_StartCommunication_task(StartCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("StartCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_StopCommunication_task(StopCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("StopCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_SwitchCommunication_task(SwitchCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("SwitchCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_ConfigCommunication_task(ConfigCommunicationDone done)
{
	auto *task = this->create_rpc_client_task("ConfigCommunication", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_LoadNavigation_task(LoadNavigationDone done)
{
	auto *task = this->create_rpc_client_task("LoadNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_StartNavigation_task(StartNavigationDone done)
{
	auto *task = this->create_rpc_client_task("StartNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_StopNavigation_task(StopNavigationDone done)
{
	auto *task = this->create_rpc_client_task("StopNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_SwitchNavigation_task(SwitchNavigationDone done)
{
	auto *task = this->create_rpc_client_task("SwitchNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_ConfigNavigation_task(ConfigNavigationDone done)
{
	auto *task = this->create_rpc_client_task("ConfigNavigation", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_LoadElectricJam_task(LoadElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("LoadElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_StartElectricJam_task(StartElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("StartElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_StopElectricJam_task(StopElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("StopElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_SwitchElectricJam_task(SwitchElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("SwitchElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_ConfigElectricJam_task(ConfigElectricJamDone done)
{
	auto *task = this->create_rpc_client_task("ConfigElectricJam", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_GetComReconstructTime_task(GetComReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetComReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_GetSarReconstructTime_task(GetSarReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetSarReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_GetElecReconstructTime_task(GetElecReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetElecReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_GetNavReconstructTime_task(GetNavReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetNavReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

inline srpc::TRPCHttpClientTask *TRPCHttpClient::create_GetJamReconstructTime_task(GetJamReconstructTimeDone done)
{
	auto *task = this->create_rpc_client_task("GetJamReconstructTime", std::move(done));

	if (!this->params.caller.empty())
		task->get_req()->set_caller_name(this->params.caller);

	return task;
}

} // end namespace DSPController

